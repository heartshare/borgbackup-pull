---

- name: client | cleanup all
  shell: |
    rm -rf ~root/.config/borg/* &>/dev/null ; \
    rm -rf /var/log/borg-backup/* &>/dev/null ; \
    rm -f /var/log/borg-*.log &>/dev/null ; \
    rm -f ~root/.config/*.logrotate &>/dev/null
  args:
    executable: /bin/bash
  register: cleanup_client
  ignore_errors: True
  changed_when: False
  when: borgbackup_cleanup == true

- name: generate random passphrase for borg repo encryption
  local_action: shell openssl rand -base64 20
  register: borg_passphrase
  changed_when: False

- name: save passphrase for borg to file
  local_action: copy content="{{ borg_passphrase.stdout }}" dest="{{ item.home }}/secret" owner=root group=root mode=0600
  with_items: "{{ borgbackup_server }}"

- name: export passphrase
  set_fact:
    borgbackup_passphrase: "{{borg_passphrase.stdout}}"

- name: client | generate ssh key for this machine
  user:
    name: "{{ borgbackup_client_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: "{{ borgbackup_ssh_key }}"
    ssh_key_type: rsa

- name: client | fetch ssh-key
  shell: "cat {{ borgbackup_ssh_key }}.pub"
  register: sshkey
  changed_when: False

- name: client | disable strict key checking for backup servers
  blockinfile:
    dest: "~{{ borgbackup_client_user }}/.ssh/config"
    create: yes
    mode: 0640
    marker: "### {mark} ANSIBLE MANAGED BLOCK {{ item.fqdn }} ###"
    content: |
      Host {{ item.fqdn }}
        StrictHostKeyChecking no
        IdentityFile {{ borgbackup_ssh_key }}
        {% if item.port is defined %}
        Port {{ item.port }}
        {% endif %}
  with_items: "{{ borgbackup_server }}"

- name: client | put sshpubkey on the normal backupserver
  authorized_key:
    user: "{{ borgbackup_owner }}"
    key: "{{ sshkey.stdout }}"
    key_options: 'command="cd {{ item.home }}{{ item.pool }}/{{ inventory_hostname }};borg serve {% if borgbackup_appendonly %}--append-only {% endif %}--restrict-to-path {{ item.home }}{{ item.pool }}/{{ inventory_hostname }}",no-port-forwarding,no-X11-forwarding,no-pty,no-agent-forwarding,no-user-rc'
  delegate_to: localhost
  when: item.type == 'normal'
  with_items: "{{ borgbackup_server }}"

- name: client | put wrapper script on server
  template:
    src: "borg-backup.sh.j2"
    dest: "/usr/local/bin/borg-backup-{{ inventory_hostname }}"
    owner: "{{ borgbackup_owner }}"
    group: "{{ borgbackup_group }}"
    mode: "0744"
  delegate_to: localhost

- name: client | create backup-directory on backup server
  shell: /usr/local/bin/borg-backup-{{ inventory_hostname }} init
  become_user: "{{ borgbackup_owner }}"
  register: backup_init
  changed_when: "'Remember your passphrase' in backup_init.stderr"
  delegate_to: localhost

- name: client | create backup cronjob on server
  cron:
    cron_file: borg-backup-{{ inventory_hostname | regex_replace('[^\w\s]', '_') }}
    user: "{{ borgbackup_client_user }}"
    name: "borg-backup-{{ inventory_hostname }}"
    minute: "{{ borgbackup_cron_minute }}"
    hour: "{{ borgbackup_cron_hour }}"
    day: "{{ borgbackup_cron_day }}"
    job: "/usr/local/bin/borg-backup-{{ inventory_hostname }} backup"
  delegate_to: localhost

- name: client | create logrotate conf
  shell: |
      echo -e "/var/log/borg-backup/borg-backup-*.log {
        create
        dateext
        daily
        rotate 7
        compress
        missingok
        notifempty
        olddir /var/log/borg-backup
      }" > ~{{ borgbackup_client_user }}/.config/borg-backup-{{ inventory_hostname | regex_replace('[^\w\s]', '_') }}.logrotate
  args:
    executable: /bin/bash
  register: logrotate
