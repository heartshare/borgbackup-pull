---

- name: client | cleanup all
  shell: |
    rm -rf ~root/.config/borg/* &>/dev/null ; \
    rm -rf /var/log/borg-backup/* &>/dev/null ; \
    rm -f /var/log/borg-*.log &>/dev/null ; \
    rm -f ~root/.config/*.logrotate &>/dev/null
  args:
    executable: /bin/bash
  register: cleanup_client
  ignore_errors: True
  changed_when: False
  when: borgbackup_cleanup == true

- name: server | create necessary directories
  file:
    path: "{{ item.home }}{{ item.pool }}/security"
    state: directory
    owner: "{{ borgbackup_owner }}"
    group: "{{ borgbackup_group }}"
    mode: 0750
    recurse: yes
  with_items: "{{ borgbackup_server }}"
  delegate_to: localhost

- name: server | generate random passphrase for borg repo encryption
  local_action: shell openssl rand -base64 20
  register: borg_passphrase
  changed_when: False

- name: server | save passphrase for borg to file
  local_action: copy content="{{ borg_passphrase.stdout }}" dest="{{ item.home }}{{ item.pool }}/security/{{ inventory_hostname }}" owner="{{ borgbackup_owner }}" group="{{ borgbackup_group }}" mode=0600 force=no
  with_items: "{{ borgbackup_server }}"

- name: server | export passphrase
  set_fact:
    borgbackup_passphrase: "{{borg_passphrase.stdout}}"

- name: client | generate ssh key for this machine
  user:
    name: "{{ borgbackup_client_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: "{{ borgbackup_ssh_key }}"
    ssh_key_type: rsa

- name: client | fetch ssh-key
  shell: "cat {{ borgbackup_ssh_key }}.pub"
  register: sshkey
  changed_when: False

- name: client | disable strict key checking
  blockinfile:
    dest: "~{{ borgbackup_client_user }}/.ssh/config"
    create: yes
    mode: 0640
    marker: "### {mark} ANSIBLE MANAGED BLOCK {{ item.fqdn }} ###"
    content: |
      Host {{ item.fqdn }}
        StrictHostKeyChecking no
        IdentityFile {{ borgbackup_ssh_key }}
        {% if item.port is defined %}
        Port {{ item.port }}
        {% endif %}
  with_items: "{{ borgbackup_server }}"

- name: server | put sshpubkey
  authorized_key:
    user: "{{ borgbackup_owner }}"
    key: "{{ sshkey.stdout }}"
    key_options: 'command="cd {{ item.home }}{{ item.pool }}/{{ inventory_hostname }};borg serve {% if borgbackup_appendonly %}--append-only {% endif %}--restrict-to-path {{ item.home }}{{ item.pool }}/{{ inventory_hostname }}",no-port-forwarding,no-X11-forwarding,no-pty,no-agent-forwarding,no-user-rc'
  delegate_to: localhost
  when: item.type == 'normal'
  with_items: "{{ borgbackup_server }}"

- name: server | put general wrapper script
  template:
    src: "borg-backup.sh.j2"
    dest: "/usr/local/bin/borg-backup"
    owner: "{{ borgbackup_owner }}"
    group: "{{ borgbackup_group }}"
    mode: "0744"
  delegate_to: localhost

- name: server | put serial wrapper script
  template:
    src: "borg-backup-serial.sh.j2"
    dest: "/usr/local/bin/borg-backup-serial"
    owner: "{{ borgbackup_owner }}"
    group: "{{ borgbackup_group }}"
    mode: "0744"
  delegate_to: localhost

- name: server | put helper wrapper script
  template:
    src: "borg-backup-list-all.sh.j2"
    dest: "/usr/local/bin/borg-backup-list-all"
    owner: "{{ borgbackup_owner }}"
    group: "{{ borgbackup_group }}"
    mode: "0744"
  delegate_to: localhost

- name: server | create backup-directory
  shell: /usr/local/bin/borg-backup -f "{{ inventory_hostname }}" -t init
  become_user: "{{ borgbackup_owner }}"
  register: backup_init
  delegate_to: localhost
  failed_when: "'already exists' not in backup_init.stderr"
  changed_when: backup_init.rc == 0

- name: server | create backup cronjob for serial mode
  cron:
    cron_file: borg-backup-serial
    user: "{{ borgbackup_client_user }}"
    name: "borg-backup-serial"
    minute: "{{ borgbackup_serial_cron_minute }}"
    hour: "{{ borgbackup_serial_cron_hour }}"
    day: "{{ borgbackup_serial_cron_day }}"
    job: "/usr/local/bin/borg-backup-serial"
  delegate_to: localhost
  when: borgbackup_mode == "serial"

- name: server | create backup cronjob for parallel mode
  cron:
    cron_file: borg-backup-{{ inventory_hostname | regex_replace('[^\w\s]', '_') }}
    user: "{{ borgbackup_client_user }}"
    name: "borg-backup-{{ inventory_hostname }}"
    minute: "{{ borgbackup_cron_minute }}"
    hour: "{{ borgbackup_cron_hour }}"
    day: "{{ borgbackup_cron_day }}"
    job: "/usr/local/bin/borg-backup -f {{ inventory_hostname }} -t backup"
  delegate_to: localhost
  when: borgbackup_mode == "parallel"

- name: client | create logrotate conf
  shell: |
      if [[ -f ~{{ borgbackup_client_user }}/.config/borg-backup.logrotate ]]; then 
        echo "logrotate conf exists"
      else
        echo -e "/var/log/borg-backup/borg-backup-*.log {
          create
          dateext
          daily
          rotate 7
          compress
          missingok
          notifempty
          olddir /var/log/borg-backup
        }" > ~{{ borgbackup_client_user }}/.config/borg-backup.logrotate
      fi
  args:
    executable: /bin/bash
  register: logrotate
  changed_when: "'logrotate conf exists' not in logrotate.stdout"
