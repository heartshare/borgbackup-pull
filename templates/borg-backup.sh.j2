#!/usr/bin/env bash

#========================================================================================================
#AUTHOR                : {{ author }}
#DESCRIPTION           : {{ description }}
#========================================================================================================

#========================================================================================================
# HELP
#========================================================================================================

##
##    usage:    bash ./borg-backup.sh -f <fqdn> -t init
##    usage:    bash ./borg-backup.sh -f <fqdn> -t backup
##    usage:    bash ./borg-backup.sh -f <fqdn> -t list
##    usage:    bash ./borg-backup.sh -f <fqdn> -t info [ -a <archive name> ]
##    usage:    bash ./borg-backup.sh -f <fqdn> -t mount -a <archive name> -m <mountpoint>
##

_help=$(grep "^## " "${BASH_SOURCE[0]}" | cut -c 4-)

#========================================================================================================
# SYNTAX VERIFICATION
#========================================================================================================

set -euo pipefail

#========================================================================================================
# DEFAULT VARIABLE DEFINITION
#========================================================================================================
### default vars
_script_name=$(basename "$0")
_script_absolute_path="$(readlink -f ${BASH_SOURCE[0]})"
_script_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
_lock_dir="/tmp"
_lock__fd="200"
_log_dir="/var/log"
_b_red='\e[1;31m'
_b_green='\e[1;32m'
_msg1="\nUnknown option.\n"
_msg2="\nOption invalid or incomplete\n"

#========================================================================================================
# DEFAULT FUNCTION DEFINITION
#========================================================================================================

_opt_h() {
  echo "${_help}"
  exit 1
}

_eexit() {
  local _error_str="$@"

  echo ${_error_str}
  exit 1
}

lock() {
    local _prefix=${1}
    local _fd=${2:-${_lock__fd}}
    local _lock_file=${_lock_dir}/${_prefix}.lock

    # create lock file
    eval "exec ${_fd}>${_lock_file}"

    # acquier the lock
    flock -n "${_fd}" && return 0 || return 1
}

#========================================================================================================
# GETOPTS
#========================================================================================================

while getopts "f:t:a:m:h" options 2>/dev/null; do
  case $options in
    f) _fqdn="$OPTARG";
       ;;
    t) _type="$OPTARG";
       ;;
    a) _archive="$OPTARG";
       ;;
    m) _mountpoint="$OPTARG";
       ;;
    h) _opt_h;
       ;;
    ?) echo -e "\nOption invalid or incomplete\n" >&2
       _opt_h;
       exit 1
       ;;
  esac
done

if [[ "$#" -lt "1" ]] || [[ "$#" -gt "8" ]]; then
  echo -e "\nPlease provide enough options.\n"
  _opt_h
fi

if [[ -z ${3:-} ]] || [[ "${3}" != "-t" ]]; then
  echo -e "${_msg2}"
  _opt_h
fi

if [[ "$#" -eq "5" ]]; then
  if [[ -z ${5:-} ]] || [[ "${5}" != "-a" ]]; then
    echo -e "${_msg2}"
    _opt_h
  fi
fi

if [[ "$#" -eq "7" ]]; then
  if [[ -z ${7:-} ]] || [[ "${7}" != "-m" ]]; then
    echo -e "${_msg2}"
    _opt_h
  fi
fi

#========================================================================================================
# CUSTOM VARIABLE DEFINITION
#========================================================================================================
{% for b in borgbackup_server %}
_passphrase_content="$(cat {{ b.home }}{{ b.pool }}/security/${_fqdn})"
export BORG_PASSPHRASE=${_passphrase_content}
export BORG_NEW_PASSPHRASE=${_passphrase_content}
export BORG_RELOCATED_REPO_ACCESS_IS_OK=yes
export BORG_BASE_DIR="{{ b.home }}"
{% endfor %}

#========================================================================================================
# CUSTOM FUNCTION DEFINITION
#========================================================================================================

function _init() {
{% for b in borgbackup_server %}
  _repository={{ b.home }}{{ b.pool }}/${_fqdn}
  /usr/local/bin/borg init --encryption={{ borgbackup_encryption_mode }}{% if borgbackup_appendonly_repoconfig %} --append-only{% endif %} {{ b.options }} ${_repository}
{% endfor %}
  exit 0
}

function _backup() {
  _date=$(date +%Y%m%d-%H%M)

  # Running some commands pre-backup
{% for precommand in borgbackup_pre_commands %}
  {{ precommand }}
{% endfor %}

{% for b in borgbackup_server %}
  printf "Backing up ${_fqdn} to {{ b.fqdn }} :\n"
  _repository=ssh://{{ borgbackup_owner }}@{{ b.fqdn }}:{{ b.port }}{{ b.home }}{{ b.pool }}/${_fqdn}

  ssh -i ~{{ borgbackup_client_user }}/.ssh/id_rsa {{ borgbackup_client_user }}@${_fqdn} -R {{ b.port }}:localhost:22 bash <<EOSSH

[ -d "/var/log/borg-backup" ] || mkdir /var/log/borg-backup

BORG_PASSPHRASE=${_passphrase_content} BORG_NEW_PASSPHRASE=${_passphrase_content} BORG_RELOCATED_REPO_ACCESS_IS_OK=yes /usr/local/bin/borg create --progress --show-rc --exclude-caches --compression {{ borgbackup_compression }} --stats {{ b.options }} ${_repository}::main-${_date} {% for dir in borgbackup_include %}{{ dir }} {% endfor %}{% for dir in borgbackup_exclude %} --exclude '{{ dir }}' {% endfor %}2>> /var/log/borg-backup/borg-backup-${_fqdn}.log

BORG_PASSPHRASE=${_passphrase_content} BORG_NEW_PASSPHRASE=${_passphrase_content} BORG_RELOCATED_REPO_ACCESS_IS_OK=yes /usr/local/bin/borg create --progress --show-rc --exclude-caches --compression {{ borgbackup_compression }} --stats {{ b.options }} ${_repository}::logs-${_date} /var/log 2>> /var/log/borg-backup/borg-backup-${_fqdn}.log

_BORG_CREATE_ECODE="\$?"

if [ "\${_BORG_CREATE_ECODE}" -eq "0" ]; then
  printf "Backup of ${_fqdn} succeeded on $(date)\n" >> /var/log/borg-backup/borg-backup-${_fqdn}.log
else
  printf "Backup of ${_fqdn} failed on $(date)\n" >> /var/log/borg-backup/borg-backup-${_fqdn}.log
fi

{% if not borgbackup_appendonly %}
# prune old backups
BORG_PASSPHRASE=${_passphrase_content} /usr/local/bin/borg prune {{ b.options }} -v --prefix main- ${_repository} -H {{ borgbackup_retention.hourly }} -d {{ borgbackup_retention.daily }} -w {{ borgbackup_retention.weekly }} -m {{ borgbackup_retention.monthly }} -y {{ borgbackup_retention.yearly }} 2>> /var/log/borg-backup/borg-backup-${_fqdn}.log

_BORG_PRUNE_ECODE="\$?"

if [ "\${_BORG_PRUNE_ECODE}" -eq "0" ]; then
  printf "Backup prune of ${_fqdn} succeeded on $(date)\n" >> /var/log/borg-backup/borg-backup-${_fqdn}.log
else
  printf "Backup prune of ${_fqdn} failed on $(date)\n" >> /var/log/borg-backup/borg-backup-${_fqdn}.log
fi

if [ "\${_BORG_CREATE_ECODE}" -eq "0" ] && [ "\${_BORG_PRUNE_ECODE}" -eq "0" ]; then
  logrotate -f ~{{ borgbackup_client_user }}/.config/borg-backup.logrotate
fi
  {% endif %}
{% endfor %}

# Running some commands post-backup
{% for postcommand in borgbackup_post_commands %}
{{ postcommand }}
{% endfor %}

EOSSH
}

function _list() {
{% for b in borgbackup_server %}
  _repository={{ b.home }}{{ b.pool }}/${_fqdn}
  printf "Archives of ${_fqdn} on {{ b.fqdn }} :\n"
  /usr/local/bin/borg list {{ b.options }} -v ${_repository}
{% endfor %}
  exit 0
}

function _info() {
{% for b in borgbackup_server %}
  _repository={{ b.home }}{{ b.pool }}/${_fqdn}

  if [[ -z ${1:-} ]]; then
    /usr/local/bin/borg info {{ b.options }} ${_repository}
  else
    /usr/local/bin/borg info {{ b.options }} ${_repository}::${1}
  fi
{% endfor %}
  exit 0
}

function _mount() {
  if [[ -z ${1} ]] || [[ -z ${2} ]]; then
    echo -e "${_msg2}"
    _opt_h
  fi

{% for b in borgbackup_server %}
  _repository={{ b.home }}{{ b.pool }}/${_fqdn}
  /usr/local/bin/borg mount {{ b.options }} ${_repository}::${1} ${2}
  if [ "$?" = "0" ]; then printf "Backup mounted on ${2}, do not forget to unmount!\n"; fi
  exit 0
{% endfor %}
}

#========================================================================================================
# FUNCTION CALL
#========================================================================================================
function _main() {

  if [[ "${_type}" == "init" ]]; then
    _init
  elif [[ "${_type}" == "backup" ]]; then
    _backup
  elif [[ "${_type}" == "list" ]]; then
    _list
  elif [[ "${_type}" == "info" ]]; then
    _info ${_archive:-}
  elif [[ "${_type}" == "mount" ]]; then
    _mount ${_archive:-} ${_mountpoint:-}
  fi
}
_main
